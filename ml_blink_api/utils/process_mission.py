from bson import ObjectId
from ml_blink_api.utils.usno import get_usno_projection
from ml_blink_api.models.candidate import has_expected_dim
from ml_blink_api.utils.panstarr import get_panstarr_projection
from ml_blink_api.utils.flask_logger import log_info, log_error
from ml_blink_api.config.db import (
  missions_collection, active_set_collection, candidates_collection, anomalies_collection
)

def process_created_mission(mission_id, str_candidate_id):
  '''
  Insert a mission's candidate to the active set if its accuracy is at least equal to the mission's accuracy threshold
  '''
  try:
    # Find recently created mission
    mission = missions_collection.find_one({'_id': mission_id})
    if not mission: raise ValueError('Mission with id {} doesn\'t exist'.format(mission_id))

    # Remove candidate if generated by the AI-Crawler
    if str_candidate_id: candidates_collection.remove({'_id': ObjectId(str_candidate_id)})

    # Build candidate attributes
    attrs = {
      'image_key': mission.get('image_key'),
      'usno_band': mission.get('image_one').get('band'),
      'panstarr_band': mission.get('image_two').get('band')
    }

    # Make sure mission's candidate has correct dimensions
    if not has_expected_dim(attrs): raise ValueError('Mission with id {} candidate has invalid dimensions'.format(mission_id))

    # Add mission's details to active set if successfully completed, otherwise create anomaly if candidate was generated by the AI-Crawler
    if mission.get('accuracy') >= mission.get('accuracy_threshold'):
      attrs['usno_vector'] = get_usno_projection(attrs.get('image_key'), attrs.get('usno_band')).tolist()
      attrs['panstarr_vector'] = get_panstarr_projection(attrs.get('image_key'), attrs.get('panstarr_band')).tolist()
      member_id = active_set_collection.insert_one(attrs).inserted_id
      log_info('Inserted member with id {} in active set'.format(member_id))
    elif str_candidate_id:
      anomaly_id = anomalies_collection.insert_one(attrs).inserted_id
      log_info('Inserted anomaly with id {} in DB'.format(anomaly_id))
    else:
      log_info('Mission with id {} was randomly generated and unsuccessfully completed'.format(mission_id))
  except Exception as e:
    log_error('Unable to process created mission: {}'.format(e))
